name: Build Raspberry Pi Binary

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build-raspberry-pi:
    name: Build for Raspberry Pi
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        target:
          - armv7-unknown-linux-gnueabihf  # Raspberry Pi 2/3/4 (32-bit)
          - aarch64-unknown-linux-gnu      # Raspberry Pi 3/4/5 (64-bit)

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross-compilation tools
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-arm-linux-gnueabihf gcc-aarch64-linux-gnu

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.target }}-
          ${{ runner.os }}-cargo-

    - name: Cache target directory
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-target-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-target-${{ matrix.target }}-
          ${{ runner.os }}-target-

    - name: Build for ${{ matrix.target }}
      run: |
        export CARGO_TARGET_ARMV7_UNKNOWN_LINUX_GNUEABIHF_LINKER=arm-linux-gnueabihf-gcc
        export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
        cargo build --release --target ${{ matrix.target }}

    - name: Create artifact directory
      run: |
        mkdir -p artifacts/${{ matrix.target }}
        cp target/${{ matrix.target }}/release/raspberry-camera-v2 artifacts/${{ matrix.target }}/
        cp README.md TROUBLESHOOTING.md artifacts/${{ matrix.target }}/
        
    - name: Set target-specific name
      id: target-name
      run: |
        case "${{ matrix.target }}" in
          "armv7-unknown-linux-gnueabihf")
            echo "name=raspberry-pi-32bit" >> $GITHUB_OUTPUT
            ;;
          "aarch64-unknown-linux-gnu")
            echo "name=raspberry-pi-64bit" >> $GITHUB_OUTPUT
            ;;
        esac

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: raspberry-camera-v2-${{ steps.target-name.outputs.name }}
        path: artifacts/${{ matrix.target }}/
        retention-days: 30

  test:
    name: Run tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}

    - name: Run tests
      run: cargo test --verbose

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-raspberry-pi, test]
    if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./release-artifacts/

    - name: Create release archives
      run: |
        cd release-artifacts
        for dir in raspberry-camera-v2-*; do
          if [ -d "$dir" ]; then
            tar -czf "${dir}.tar.gz" -C "$dir" .
          fi
        done

    - name: Generate tag name
      id: tag
      run: echo "name=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: release-${{ steps.tag.outputs.name }}
        name: "Raspberry Pi Camera Release ${{ steps.tag.outputs.name }}"
        files: release-artifacts/*.tar.gz
        generate_release_notes: false
        body: |
          ## Raspberry Pi Camera Streaming System
          
          ### Installation
          
          1. Download the appropriate binary for your Raspberry Pi:
             - `raspberry-camera-v2-raspberry-pi-32bit.tar.gz` for 32-bit OS
             - `raspberry-camera-v2-raspberry-pi-64bit.tar.gz` for 64-bit OS
          
          2. Extract and run:
             ```bash
             tar -xzf raspberry-camera-v2-raspberry-pi-*.tar.gz
             cd raspberry-camera-v2-*
             chmod +x raspberry-camera-v2
             ./raspberry-camera-v2
             ```
          
          3. Access via browser: `http://<raspberry-pi-ip>:8080`
          
          ### Requirements
          - Raspberry Pi Camera Module 2
          - `rpicam-apps-lite` installed: `sudo apt install rpicam-apps-lite`
          
          See TROUBLESHOOTING.md for common issues and solutions.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}